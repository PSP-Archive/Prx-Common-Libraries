ライブラリのバージョン関連　by wn

＊2011/6/29 修正しました。目を通しておいてください。

【バージョン表記】
・[ MAJOR.MINOR ]を基本とする。
・MAJORとMINORをどのように更新していくかは自由？
・module_infoのMAJORとMINORはバージョン表記と対応するようにする。
例：
1.0
PSP_MODULE_INFO("", , 1, 0);

1.1
PSP_MODULE_INFO("", , 1, 1);

2.1
PSP_MODULE_INFO("", , 2, 1);


【バージョンアップ】
・バージョンアップする際、互換性を保たなくてはならない。
・どうしても互換性を保てない更新をする場合や、一新して新しく作り直したい場合などはどうするか。それには「世代」という概念（でいいのかな？）を使いたいと思います。
例：
v1.2を、v1.3やv2.0などにバージョンアップする時、v1.2で動作するプログラムはv1.3やv2.0でもそのまま動作できなくてはならない。
互換性を保てない場合や一新する場合は、
「cmLibMenu」→「cmLibMenu2」
といった感じに名前を変えて新しいライブラリとしてリリースする。


【ファイル名 & ライブラリ名 & モジュール名】
・ライブラリ名は「"***"＋"世代"」である。ただし、1の場合は省略。（***は任意）
・モジュール名は「"***"＋"世代"」である。ただし、1の場合は省略。（***は任意）
・ファイル名は"ライブラリ名.prx"である。
例：
cmLibMenu v1.0, cmLibMenu v2.1
ライブラリ名→cmLibMenu
モジュール名→cmLibMenu
ファイル名→cmLibMenu.prx

cmLibMenu2 v1.0
ライブラリ名→cmLibMenu2
モジュール名→cmLibMenu2
ファイル名→cmLibMenu2.prx


【アップデート】
・専用のアップデーターを用意する。
・module_infoの情報とサーバの情報からアップデートの判断をする。


【問題点】
・MAJORとMINORしかないので、MINORより細かい修正をしたい時どうするか。
・同じライブラリの違うMAJORバージョンが同時に使用される時、メモリが無駄になる。
